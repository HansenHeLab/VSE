#!/usr/bin/perl -w
use strict;
use Getopt::Long;
use Pod::Usage;
use Cwd 'abs_path';
use Statistics::R;

=pod
=head1 VSE

VSE is a Perl/Rscript command line tool to calculate the enrichment of associated variant set (AVS) for an array of genomic regions.

=head1 SYNOPSIS

vse --tag example.SNPs/NHGRI-BCa.bed --ld example.SNPs/ld_BCa.bed --beds region1.bed,region2.bed --dataDir data/ --output vse 

=head1 OPTIONS

=over 12

=item B<--tag>

Location to tag SNPs' list. Please check the documentation for file format.

=item B<--ld>

Location to LD SNPs' list. Please check the documentation for file format.

=item B<--output>

Output file prefix.

=item B<--beds>

Comma or space separate paths of regions in bed format.

=item B<--labels>

Labels for each region. Must be in same sequence as the bed files provided.

=item B<--r>

The r value used for determining LD SNPs. Must be between 0.6 and 0.9. Default: 0.8

=item B<--dataDir>

The path to data downloaded with vse.

=item B<--bgSize>

The number of MRVSs to compute. More the better. Default: 500

=item B<--n>

The number of threads to use. Default: 10

=item B<--normality>

P-value cutoff for KS-test of normality. Must be between 0.1 to 0.9. Higher is more time consuming but ensures normality of null distribution. Default: 0.9.

=item B<--visualize>

Switch to produce pdf visualization of the data.

=item B<--p>

P-value cutoff. Only useful when --visualize switch is on. Default: 0.05

=item B<--padjust>

Adjusted P-value cutoff by Bonferroni correction. Only useful when --visualize switch is on. Default: 0.01

=item B<--quiet>

Mute verbosity.

=item B<--keepTmp>

Save the temoporary files generated. Useful for debugging.

=item B<--seed>

Set seed value for reproducing results. The seed used for a particular run can be found in the log file.

=back

=head1 ADDITIONAL

Please check the documentation online for advanced options.

=cut


#----ARGUMENTS-----------
my $program = "all";
my $tagFile = "";
my $ldFile = "";
my $avsFile = "";
my $tallyFile = "";
my $r = 0.8;
my $bgSize = 500;
my $outputPrefix = "vse";
my $mrvsDir = "";
my $bedDir = "";
my $vseFile = "";
my $matrixFile = "";
my $totalForks = 10; 
my $quiet;
my $keepTmp;
my $help = 0;
my $man = 0;
my $dataDir = "";
my $pcutoff = 0.05;
my $bcutoff = 0.1;
my $kscutoff = 0.9;
my $seed = 0;
my @bedsInput;
my @labelInput;
my $visualize;

GetOptions ("i|tag=s" => \$tagFile,
	    "l|ld=s" => \$ldFile,
	    "r=f" => \$r,
	    "bgSize=i" => \$bgSize,
	    "n=i" => \$totalForks,
	    "avs=s" => \$avsFile,
	    "tally=s" => \$tallyFile,
	    "p=f" => \$pcutoff,
	    "padjust=f" => \$bcutoff,
	    "o|output=s" => \$outputPrefix,
	    "m|mrvsDir=s" => \$mrvsDir,
	    "dataDir=s" => \$dataDir,
	    "vse=s" => \$vseFile,
	    "matrix=s" => \$matrixFile,
	    "q|quiet!" => \$quiet,
	    "h|help|?!" => \$help,
	    "program=s" => \$program,
	    "keepTmp!" => \$keepTmp,
	    "beds=s{1,}" => \@bedsInput,
	    "labels=s{,}" => \@labelInput,
	    "normality=f" => \$kscutoff,
	    "visualize!" => \$visualize,
	    "seed=i" => \$seed,
	    "man" => \$man
    ) or pod2usage(2);
if ($help){
    initLogo();
    pod2usage(1);
}

#set seed
$seed = time ^ ($$ + ($$ << 15)) if $seed == 0;
srand($seed);

#Global variables
#my $scriptPath = abs_path($0);
#my @pathArr = split (/[\/\\]/, $scriptPath);
#my $scriptDir = join ("/", @pathArr[0..$#pathArr-1]);
my @beds;
my @labels;
my $logFile = $outputPrefix.".log";
foreach my $bed (@bedsInput){
    if ($bed =~ m/,/){
	my @arr = split(",", $bed);
	foreach my $key (@arr){
	    push (@beds, $key);
	}
    } else {
	push (@beds, $bed);
    }
}

if (@labelInput){
    foreach my $label (@labelInput){
	if ($label =~ m/,/){
	    my @arr = split(",", $label);
	    foreach my $key (@arr){
		push (@labels, $key);
	    }
	} else {
	    push (@labels, $label);
	}
    }
} else {
    printLog("Labels not provided. Will use filename. You can add --label to name your region files.");
}

if (scalar @labels != scalar @beds){
    printLog("Number of labels not identical to number of regions provided. Will use filename.") if (@labelInput);
    @labels = ();
    foreach my $bed (@beds){
	my $f = removeExtension($bed);
	push (@labels, $f);
    }
}
open (LOG, ">$logFile");

#------------------------

initLogo() if (!$quiet);

#----------subroutines---------------
sub printLog
{
    my $line = shift;
    if (!$quiet){
	print localtime()." $line\n";
    }
    print LOG localtime()." $line\n" if ($program eq "all");
}

sub removeExtension
{
    my $name = shift;
    my @bedfileName_arr = split /[\\\/\.]/, $name;
    my $bedfileName = $bedfileName_arr[$#bedfileName_arr - 1];
    return $bedfileName;
}

sub loadTagSNPs
{
    my $AVS = shift;
    my @tagSNPs;
    open (HIN, "grep \"#\" $AVS | cut -d \" \" -f 3 |") or die "Could not open $AVS file: $!\n";
    while (<HIN>){
        chomp;
        push (@tagSNPs, $_);
    }
    close HIN;
    return \@tagSNPs;
}

sub loadFileIntoArray
{
    my $file = shift;
    my @lines;
    open (INF, "<$file") or die "Could not open $file: $!\n";
    while (<INF>){
	chomp;
	push @lines, $_;
    }
    close INF;
    return \@lines;
}

sub lineCount
{
    my $inputfile = shift;
    my $totalTagSnp=`wc -l < $inputfile`;
    $totalTagSnp =~ s/^\s+//;
    chomp $totalTagSnp;
    return $totalTagSnp;
}

# usage: line_with_index(*DATA_HANDLE, *INDEX_HANDLE, $LINE_NUMBER)
# returns line or undef if LINE_NUMBER was out of range
sub line_with_index {
    my $data_file  = shift;
    my $index_file = shift;
    my $line_number = shift;
    my $size = length(pack("N", 0)); #size of an index entry
    my $i_offset = $size * ($line_number -1);
    seek($index_file, $i_offset, 0) or return;
    my $entry;
    read($index_file, $entry, $size);
    my $d_offset = unpack("N", $entry);
    seek($data_file, $d_offset, 0);
    return scalar (<$data_file>);
}
sub extrGzip
{
    my $file = shift;
    my $extr;
    ($extr= $file)=~s/.gz//;
    if (! -e $extr){
	system("gunzip $file");
    }
    return $extr;
}
sub LDX_v_bed
{
    my $LDXinput = shift;
    my $POS2ref = shift;
    my %POS2 = %$POS2ref;
    my %POS1;

    foreach my $n (1..22,"X","Y"){
        my $chr ="chr".$n; my @TMP;
        @{$POS1{$chr}} = @TMP;
    }
    my $raSNP = "";
    open (LDX, "<$LDXinput") or die $!;

    while(<LDX>){
        chomp;
        my ($chr,$s,$e) = split (/\t/, $_) if ($_ !~ m/raSNP/);
        if( /raSNP/ or eof(LDX) ){ # The end of an raSNP/ldSNP cluster is marked by either another raSNP or the EOF.                                                                                                                                                                                  
            if( eof(LDX) and !/raSNP/ ){
                my $rec = {S=>$s, N=>$raSNP};
                push @{$POS1{$chr}},$rec;
            }
            if( !eof(LDX) ){ # new raSNP                                                                                                                                                                                                                                                              
                my @line  = split/ /;
                $raSNP = $line[2];
            }
        } else {
            my $rec = {S=>$s, N=>$raSNP};
            push @{$POS1{$chr}},$rec;
        }
    }
    close LDX;

    foreach my $chr (keys %POS1){
        @{$POS1{$chr}} = sort {$a->{S} <=> $b->{S}} @{$POS1{$chr}};
    }

    my %seenENTRY;
    my $tallyCount = 0;

    foreach my $chr (keys %POS1){
        my @P1 = @{$POS1{$chr}};
        next if !$POS2{$chr};
        my @P2=@{$POS2{$chr}};
        my $n=0; #keep track of the ending position of last entry in the same chromosome                                                                                                                                                                                                              
        foreach my $p1 (@P1){ #each SNP                                                                                                                                                                                                                                                               
            my $s =$p1->{S};
            my $rsID = $p1->{N};
            if ($seenENTRY{$rsID}){next} #skip identical entries                                                                                                                                                                                                                                      
            my ($fr,$lr)=($n,$#P2);
            my $i=$n;
            while ($fr <= $lr){
                $i= int(($fr+$lr)/2);
                if ($P2[$i]->{S} > $s){
                    $lr =$i-1;
                } elsif ($P2[$i]->{E} < $s){
                    $fr =$i+1;
                } elsif ($s>=$P2[$i]->{S} && $s<=$P2[$i]->{E}){
                    $tallyCount++;
                    $seenENTRY{$rsID}=1;
                    $n=$i;
                    last;
                }
            }
        }
    }
    return ($tallyCount,\%seenENTRY);
}
sub LDX_to_LDXI
{
    my @line;
    my $raSNP;
    my $ldSNP;
    my $ldx;
    my $ldxi;
    my $file = shift;
    my $outfile = shift;
    open LDX, $file or die $!;
    while(<LDX>){
        chomp;
        if( /raSNP/ ) { # New raSNP.                                                                                                                                                                                                                                                                  
            @line  = split/ /;
            $raSNP = $line[2]; # raSNP rsid                                                                                                                                                                                                                                                           
        } else {
            # Add raSNPs to ldSNP hash (usually it's the other way around).                                                                                                                                                                                                                           
            push @{ $ldx->{ $_ } }, $raSNP;
        }
    }
    close LDX;
    open (LDXI, ">$outfile") or die $!;
    for my $k ( keys %{ $ldx } ){
        push @{ $ldxi->{ join( "_", @{ $ldx->{ $k } }) }}, $k;
    }
    for my $k ( keys %{ $ldxi } ){
        print LDXI "# raSNP ".$k."\n".join( "\n", @{ $ldxi->{ $k } })."\n";
    }
    close LDXI;
}

sub initLogo
{
    print "\n\n -----------------------------\n";
    print "|    __     ______  _____     |\n";
    print "|    \\ \\   / / ___|| ____|    |\n";
    print "|     \\ \\ / /\\___ \\|  _|      |\n";
    print "|      \\ V /  ___) | |___     |\n";
    print "|       \\_/  |____/|_____|    |\n";
    print "|                             |\n";
    print "----Variant Set Enrichement----\n\n\n";
}
sub tally
{
    my $infile = shift;
    my $outfile = shift;
    my $tally = 0;
    my $inside = 0;
    my $raSNP = "";
    my $highestTally = 0;
    open (LDX, "<$infile") or die $!;
    open (OUT, ">$outfile") or die $!;
    while (<LDX>){
        chomp;
        if( /raSNP/ or eof ){
            # The end of an raSNP/ldSNP cluster                                                                                                                                                                                                                                                       
            # is marked by either another raSNP or the EOF.                                                                                                                                                                                                                                           
            if( eof and !/raSNP/ ){
                # The last ldSNP in the file.                                                                                                                                                                                                                                                         
                $tally++;
            }
            if( $inside ){
                print OUT "$raSNP $tally\n";
            }
            if( !eof ){ # new raSNP                                                                                                                                                                                                                                                                   
                my @line  = split/ /;
                $raSNP  = $line[2];
                $tally = 0;
                $inside = 1;
            }
        } else {
            #a ldSNP                                                                                                                                                                                                                                                                                  
            $tally++;
            $highestTally = $tally if $tally > $highestTally;
        }
    }
    close OUT;
    close LDX;
    return $highestTally;
}
sub bcPower
{
    my $arrRef = shift;
    my $lambda = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->set('l', $lambda);
    $R->run(q`if (!require(car)){install.packages("car"); library(car)}`);
    $R->run(q`b <- bcPower(a, l)`);
    my $newArrRef = $R->get('b');
    $R->stop();
    return $newArrRef;
}

sub kstest
{
    my $arrRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->run(q`kst <- ks.test(a, "pnorm", mean=mean(a), sd=sd(a), exact = TRUE)`);
    my $pval = $R->get('kst$p.value');
#    my $pval = sprintf("%.2f", $R->get('kst$p.value'));
    $R->stop();
    return $pval;
}

sub pThreshold
{
    my $seqRef = shift;
    my $R = Statistics::R->new();
    $R->set('p', $pcutoff);
    $R->set('seq', [@{$seqRef}]);
    $R->run(q`pthresh <- -log10( p )`,
	    q`ptmp <- cbind( -log10(1 - pnorm(seq)) - pthresh, seq )`,
	    q`pthresh_sd <- ptmp[order( ptmp[,1] ^ 2),][1,2]`);
    my $p = $R->get('pthresh_sd');
    $R->stop();
    return $p;
}

sub bThreshold
{
    my $seqRef = shift;
    my $R = Statistics::R->new();
    $R->set('b', $bcutoff);
    $R->set('seq', [@{$seqRef}]);
    $R->run(q`bthresh <- -log10( b / length(seq) )`,
	    q`btmp <- cbind( -log10(1 - pnorm(seq)) - bthresh, seq )`,
	    q`bthresh_sd <- btmp[order( btmp[,1] ^ 2),][1,2]`);
    my $b = $R->get('bthresh_sd');
    $R->stop();
    return $b;
}

sub pnorm
{
    my $avs = shift;
    my $seqRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', $avs);
    $R->set('seq', [@{$seqRef}]);
    $R->run(q`p <- 1 - pnorm( a, mean(seq), sd(seq) )`,
	    q`p <- -log10(p)`);
    my $p = $R->get('p');
    $R->stop();
    return $p;
}

sub runif
{
    my $arrRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->run(q`xran <- a + runif( length(a), 0, 1)`);
    my $ref = $R->get('xran');
    $R->stop();
    return $ref;
}
sub scale
{
    my $arrRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->run(q`n <- median(a)`,
	    q`a <- a - n`,
	    q`a <- a / sd(a)`);
    my $ref = $R->get('a');
    $R->stop();
    return $ref;
}

sub sig
{
    my $arrRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->run(q`n <- 1-pnorm(a, mean(a), sd(a))`,
	q`b <- p.adjust(n, method="bonferroni", n=length(n))`);
    my $p = $R->get('n[1]');
    my $b = $R->get('b[1]');
    return ($p,$b);
}

sub mean
{
    my $arrRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->run(q`m <- mean(a)`);
    my $m = sprintf("%.2f", $R->get('m'));
    $R->stop();
    return $m;
}

sub sd
{
    my $arrRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->run(q`m <- sd(a)`);
    my $m = sprintf("%.2f", $R->get('m'));
    $R->stop();
    return $m;
}

sub padjust
{
    my $arrRef = shift;
    my $R = Statistics::R->new();
    $R->set('a', [@{$arrRef}]);
    $R->run(q`m <- p.adjust(a, method="bonferroni")`);
    my $m = $R->get('m');
    $R->stop();
    return $m;
}

sub matrixPlot
{
    my $infile = shift;
    my $outfile = shift;
    my $R = Statistics::R->new();
    $R->set('file', $infile);
    $R->set('out', $outfile);
    $R->run(q`mat <- read.table(file, header=TRUE, row.names =1, sep="\t")`,
	    q`pdf(out)`,
	    q`heatmap(as.matrix(mat), col=c("white","grey10"), scale="none", margins=c(10,5), cexRow = 1, cexCol = 0.5)`,
	    q`dev.off()`);
    $R->stop();
}
sub boxplot
{
    my $matFile = shift;
    my $arrRef = shift;
    my $output = shift;
    my $R = Statistics::R->new();
    $R->set('bf', [@{$arrRef}]);
    $R->set('file', $matFile);
    $R->set('out', $output);
    $R->run(q`df <- read.csv(file, row.names = 1, header=FALSE)`,
	    q`pdf(out)`,
	    q`boxplot(t(df), ylim=c( min(df),max(df) ), outline = FALSE, notch=TRUE, las=2, ylab="Enrichment Score")`,
	    q`for (i in 1:length(bf)){points(i,df[i,1], pch=20, cex=2, col=ifelse(bf[i] == "*", "red","black"))}`,
	    q`dev.off()`);
    $R->stop();
}
sub log10 {
    my $n = shift;
    return -log($n)/log(10);
}
#-------------------------

#-------INPUT QC---------

#Check parameters
if ($program ne "all"){
    die "The --program must be any of \"preprocess\", \"vse\" or \"stat\" .\nPlease see documentation: perl $0 --help\n" if ($program !~ m/(preprocess|vse|stat)/);
} else {
    die "Parameters do not exist. See documentation: perl $0 --help\n" if (! -e $tagFile || ! -e $ldFile || ! -d $dataDir);
    print "Run parameters:\n--tag\t$tagFile\n--ld\t$ldFile\n--r\t$r\n--bgSize\t$bgSize\n--output $outputPrefix\n--n\t$totalForks\n--dataDir\t$dataDir\n--normality\t$kscutoff\n--seed\t$seed\n--p\t$pcutoff\n--padjust\t$bcutoff\n" if (!$quiet);
    print LOG "Run parameters:\n--tag\t$tagFile\n--ld\t$ldFile\n--r\t$r\n--bgSize\t$bgSize\n--output $outputPrefix\n--n\t$totalForks\n--dataDir\t$dataDir\n--normality\t$kscutoff\n--seed\t$seed\n--p\t$pcutoff\n--padjust\t$bcutoff\n";
    print "--beds:\n" if (!$quiet);
    print LOG "--beds:\n";
    for (my $i=0; $i<=$#beds;$i++){
	print "\t$labels[$i]: $beds[$i]\n" if (!$quiet);
	print LOG "\t$labels[$i]: $beds[$i]\n";
    }
    print "--keepTmp\n\n" if ($keepTmp && !$quiet);
    print LOG "--keepTmp\n" if ($keepTmp);
    print LOG "--visualized\n\n" if ($visualize);
}
#------------------------


#------------------------PREPROCESS---------------------------------->
if ($program =~ m/(preprocess|all)/){
       
    #QC
    die "-r must be between 0.6 and 1\n" if $r <0.6 || $r > 1;
    die "parameter missing\n" if ($tagFile eq "" || $ldFile eq "");
    die "$tagFile file not found\n" if (! -e $tagFile);
    die "$ldFile file not found\n" if (! -e $ldFile);
    my $totalTagSnp=lineCount($tagFile);
    die "$tagFile does not have any snp\n" if ($totalTagSnp == 0);
    my $totalColumnInLD = `awk '{print NF}' $ldFile | sort -u | wc -l`;
    die "Column number is not same for all lines in $ldFile\n" if $totalColumnInLD != 1;
    
    printLog("Verbosity on. Use --quiet if you prefer silence!");
    printLog("$totalTagSnp SNPs found in $tagFile");
    
    my $ldxFile = $outputPrefix.".LDX.bed";
    $avsFile = $outputPrefix.".avs" if $avsFile eq "";
    $tallyFile = $outputPrefix.".avs.tally" if $tallyFile eq "";
    my $lines = loadFileIntoArray($tagFile);
    die "$tagFile looks empty\n" if scalar @$lines == 0;
    my $lineCounter = 1;
    open (OUT, ">$ldxFile") or die "Count not open $ldxFile for writing: $!\n";
    foreach my $line (@$lines){
	my @f = split /\t/, $line;
	my $totalColumns = $#f + 1;
	die "Line $lineCounter has $totalColumns columns instead of 4 in $tagFile\n" if $totalColumns < 3;
	my $header= "# raSNP $f[3]\n";
	print OUT $header;
	open (IN, "awk -v tag=$f[3] '\$5==tag' $ldFile |") or die;
	while (<IN>){
	    chomp;
	    my @g = split /\t/;
	    if ($g[4] ne $g[3]){ #skip tag snp itself
		my $printline = "$g[0]\t$g[1]\t$g[2]\n";
		print OUT $printline;
	    }
	}
	close IN;
	$lineCounter++;
    }
    close OUT;
    printLog("Preparing AVS file");
    LDX_to_LDXI($ldxFile,$avsFile);
    printLog("$avsFile created");
    my $highestTally = tally($avsFile,$tallyFile);
    printLog("$tallyFile created");
    unlink($ldxFile);
    
    #----------Computing MRVSs------------------>

    #Create mrvs directory
    $mrvsDir = $outputPrefix.".MRVS" if $mrvsDir eq "";
    if (! -d $mrvsDir){
	mkdir $mrvsDir;
    } else {
	printLog("$mrvsDir exists. Will overwrite");
    }
    
    #Verbose
    printLog("Seeking in $dataDir for supporting data. User --dataDir to change this location.");

    #Local variables
    my @SNPS; #null tallies from database
    my @AV; #AVS tallies
    my @RA; #AVS LDXI IDs
    my %blocks; #null LD blocks

    #Finding null tally file
    my $null_tally_file = "$dataDir/ld_tally.txt.gz";
    die "$null_tally_file was not found in $dataDir! Is --dataDir correct?\n" if (!-e $null_tally_file);

    my %nullIds;

    #Load null tallies
    printLog("Using $r for LD cutoff. Use --r to change cutoff");
    printLog("Loading null tallies from $null_tally_file");
    open (SNPS, "gunzip -c $null_tally_file |") or die "$!\n";
    my $h = <SNPS>;
    while(<SNPS>){ 
	chomp;
	my ($id,$r6,$r7,$r8,$r9) = split /\t/;
	next if /SNP/;
	my @f = split (/\t/, $_);
	my $tally;
	if ($r < 0.65){
	    $tally = $r6;
	} elsif ($r >=0.65 && $r < 0.75){
	    $tally = $r7;
	} elsif ($r >= 0.75 && $r < 0.85){
	    $tally = $r8;
	} elsif ($r >= 0.9){
	    $tally = $r9;
	}
	next if $tally > $highestTally;
	push (@{ $SNPS[$tally] }, $id);
	$nullIds{$id} = 1;
    }
    close SNPS;

    #Load AVS tallies
    printLog("Loading AVS tallies from $tallyFile");
    open (AV, "<$tallyFile") or die "$!\n";
    while (<AV>){
	chomp;
	my ($id, $tally) = split / /;
	push @AV, $tally;
	push @RA, $id;
	foreach my $k (0..$#{ $SNPS[ $tally ] }){ #looping through null sets with identical tally
	    if( $id =~ ${ $SNPS[ $tally ] }[$k] ){ #if AVS snp exists in null set
		printLog("$id found in null set. Removing.");
		splice( @{ $SNPS[ $tally ] }, $k, 1 ); #remove the AVS snp from null set
	    }
	}
    }
    close AV;

    #Load null LD blocks
    printLog("Loading LD blocks from $dataDir");

    my $nullIdList = "$dataDir/null_ids_${r}.txt";
    die "$nullIdList not found in $dataDir ! Is --dataDir correct?" if (! -e $nullIdList);	     
    my $pos = 1;
    open (IN, "<$nullIdList") or die;
    while (<IN>){
	chomp;
	$blocks{$_} = $pos;
	$pos++;
	}
    close IN;

    my $ldBlockFileGz = "$dataDir/null_ld_blocks_${r}.txt.gz";
    my $ldBlockFile = extrGzip($ldBlockFileGz);
    die "$ldBlockFile or $ldBlockFileGz not found in $dataDir ! Is --dataDir correct? Does gunzip work?" if (! -e $ldBlockFile);
    my $idxFile = "$dataDir/null_ld_blocks_${r}.txt.idx";
    die "$idxFile not found in $dataDir ! Is --dataDir correct?" if (! -e $idxFile);
    #Writing MRVSs
    printLog("Computing $bgSize MRVSs. Use --bgSize to change the number of MRVSs.");
     my $delim = int $bgSize / $totalForks;
     my $forks = 1; #fork counter  
     for (1..$totalForks){
     	my $pid = fork();
     	if (not defined $pid){
     	    warn 'Could not fork';
     	    next;
     	}
     	if ($pid){ #parent process
     	    $forks++; #count the number of child processes
     	} else { #child process
	    $seed = $seed + $forks;
	    printLog("seed for child process $forks : $seed");
	    srand($seed);
	    open (my $fh, "<$ldBlockFile") or die;
	    open (my $index, "<", $idxFile) or die;
     	    my $from = $forks == 1 ? 1 : ($forks * $delim) - ($delim - 1);
     	    my $to = $forks == $totalForks ? $bgSize :  $forks * $delim;
     	    foreach my $file ($from..$to){
		$file = $mrvsDir."/".$file;
		open (OUT, ">$file") or die;
#		printLog("Writing to $file");
		foreach my $i (0..$#AV){ #loop through risk loci
#		    print STDERR "size: $AV[$i]\n";
		    if ($#{$SNPS[$AV[$i]]} < 1){ #there is no null LD block of identical size
#			print STDERR "No null found\n";
			$AV[$i]-=1 until $#{$SNPS[$AV[$i]]} > 1; #Reduce the size of risk LD block by one until a matched null set is found
#			print STDERR "New size: $AV[$i]\n";
		    }
		    my @nullLd = @{$SNPS[$AV[$i]]}; #array of all null LD blocks with similar size as risk locus
#		    print STDERR "No. of matching null: $#nullLd\n";
		    my $rand = int(rand( $#nullLd + 1)); #randomly choose one null LD block
#		    print STDERR "random no. generated: $rand\n";
		    my $nullTagId = $nullLd[$rand]; #tag SNP of the null LD block
		    print STDERR "$nullTagId not found in blocks\n" if (!exists $blocks{$nullTagId});
		    my $seeking = $blocks{$nullTagId};
#		    print STDERR "line no. $seeking for $nullTagId\n";
		    my $nulls = line_with_index($fh,$index,$seeking);
		    chomp $nulls;
#		    print STDERR "$nulls for $nullTagId found in line number $seeking\n";
		    my $countComma = ($nulls =~ tr/,//);
		    $countComma ++;
#		    print STDERR "Size of null: $countComma\n";
		    print OUT "# raSNP ".$RA[ $i ]."\n";
		    if ($nulls =~ m/,/){
			my @LDsnps = split (/,/,$nulls);
			foreach my $LDsnp (@LDsnps){
#			    print STDERR "$LDsnp of tag $nullTagId\n";
			    my ($c,$s) = split (/:/, $LDsnp);
			    my $e = $s+1;
			    print OUT "$c\t$s\t$e\n";
			}
		    } else {
			my ($c,$s) = split (/:/,$nulls);
			my $e =$s+1;
			print OUT "$c\t$s\t$e\n";
		    }
		}
		close OUT;
	    }
	    close $fh;
	    close $index;
	    exit;
	}
    }
    for (1..$forks){
	my $pid = wait();
    }
}
#<-----------------------PREPROCESS----------------------------------


#----------------------------VSE------------------------------------>

if ($program =~ m/(all|vse)/){
    die "$avsFile not found\n" if (! -e $avsFile && $program =~ m/vse/);

    #Local variables
    my %tally;
    my %heatmap;
    my $tagSNPs = loadTagSNPs($avsFile);

    #Global variable
    $vseFile = $outputPrefix.".VSE.txt";
    $matrixFile = $outputPrefix.".matrix.txt";
    
#QC
    die "You must provide at least 2 region files in --beds\n" if (scalar @beds < 2);
    foreach my $bed (@beds){
	die "$bed not found\n" if (! -e $bed);
    }

    #Reading bed files
    for (my $i=0; $i<=$#beds; $i++){
	my $bedPath = $beds[$i];
	my $bedfile = $labels[$i];
	printLog("Intersecting AVS and null against $bedfile");
	#Load bed to a hash
	my %POS2;
	foreach my $t (1..22,"X","Y"){
	    my $chr ="chr".$t; my @TMP;
	    @{$POS2{$chr}}=@TMP;
	}
	open (IN, "<$bedPath") or die;
	while (<IN>){
	    chomp;
	    my @f = split (/\t/, $_);
	    my ($chr,$s,$e) = ($f[0],$f[1],$f[2]);
	    my $rec = {S=>$s, E=>$e};
	    push @{$POS2{$chr}},$rec;
	}
	close IN;
	
	foreach my $chr (keys %POS2){
	    @{$POS2{$chr}} = sort {$a->{S} <=> $b->{S} ||$a->{E} <=> $b->{E}} @{$POS2{$chr}};
	}
	
	my ($tally, $overlapsRef) = LDX_v_bed($avsFile, \%POS2);
	$tally{$bedfile}->{'AVS'} = $tally;
	foreach my $tagSNP (@$tagSNPs){
	    $heatmap{$bedfile}->{$tagSNP} = exists $overlapsRef->{$tagSNP} ? 1 : 0;
	}
	opendir (MRVdir, $mrvsDir) or die "Error in opening dir $mrvsDir\n";
	while (my $mrvfile = readdir(MRVdir)){
	    next if ($mrvfile !~ m/\d/);
	    $mrvfile = $mrvsDir."/".$mrvfile;
	    my ($tally, $overlapsRef) = LDX_v_bed($mrvfile, \%POS2);
	    $tally{$bedfile}->{$mrvfile} = $tally;
	}
	closedir (MRVdir);
    }
	
    open (OUT, ">$vseFile") or die;
    foreach my $bed ( sort {$a cmp $b} keys %tally){
	print OUT $tally{$bed}->{'AVS'};
	foreach my $mrv (keys %{$tally{$bed}}){
	    next if $mrv eq "AVS";
	    print OUT "\t".$tally{$bed}->{$mrv};
	}
	print OUT "\t".$bed."\n";
    }
    close OUT;

    open (OUT, ">$matrixFile") or die;
    print OUT "Annotation";
    for my $tagSNP (@$tagSNPs){
	print OUT "\t$tagSNP";
    }
    print OUT "\n";
    foreach my $bed (keys %heatmap){
	print OUT $bed;
	for my $tagSNP (@$tagSNPs){
	    print OUT "\t".$heatmap{$bed}->{$tagSNP};
	}
	print OUT "\n";
    }
    close OUT;
}
#------------------------------

#--------------R---------------
if ($program =~ m/(all|stat)/){
    #Check R 3.1.1
    my $toolName = "Rscript";
    my $toolPath = '';
    for my $path ( split (/:/, $ENV{PATH}) ) {
	if ( -f "$path/$toolName" && -x _ ) {
	    $toolPath = "$path/$toolName";
	    last;
	}
    }
    die "No $toolName command available. VSE requires R version 3.1.1 or above to function.\n" unless ( $toolPath );

    die "$vseFile not found\n" if (! -e $vseFile && $program =~ m/stat/);
    die "$matrixFile not found\n" if (! -e $matrixFile && $program =~ m/stat/);

    my %olaps;

    open (IN, "<$vseFile") or die;
    while (<IN>){
	chomp;
	my @f = split (/\t/, $_);
	my $region = pop @f;
	@{$olaps{$region}} = @f;
    }
    close IN;

    my %olaps_plus1;
    
    foreach my $region (keys %olaps){
#	print $region;
	foreach my $val (@{$olaps{$region}}){
	    $val++;
	    push (@{$olaps_plus1{$region}}, $val);
#	    print ",$val";
	}
#	print "\n";
    }
    my %stat;
    my $outputVseStat = $outputPrefix.".stat.txt";
    my $outputBoxplotMat = $outputPrefix.".bp.txt";
    open (OUT, ">$outputVseStat") or die;
    open (BP, ">$outputBoxplotMat") or die;
    foreach my $region (sort {$a cmp $b} keys %olaps_plus1){
	printLog ("Calculating enrichment for $region");
	print BP $region.",";
	push (@{$stat{'beds'}}, $region);
	my @vals = @{$olaps_plus1{$region}};
	my $avs = $vals[0];
	my $vals_norm_ref = runif(\@vals);
	my $kp = kstest($vals_norm_ref);
	my $avs_norm = $avs;
	if ($kp < $kscutoff){
	    printLog("KS p-value ($kp) lower than --normality $kscutoff. Finding lambda for better normality.");
	    my $bestLambda = 9999;
	    for (my $lambda=-2;$lambda<=2;$lambda+=0.1){
		my $ref = bcPower($vals_norm_ref, $lambda);
		my $k = kstest($ref);
		if ($k > $kp){
		    $bestLambda = sprintf ("%.1f",$lambda);
		    $kp = $k;
		}
		last if $kp >= $kscutoff;
	    }
	    $vals_norm_ref = bcPower($vals_norm_ref, $bestLambda);
	    $kp = kstest($vals_norm_ref);
	    printLog("Lambda $bestLambda used for KS pvalue of $kp.");
#	    $avs_norm = shift @{$vals_norm_ref};
	}
	my $vals_scaled = scale($vals_norm_ref);
	my ($p, $b) = sig($vals_scaled);
	$avs_norm = $$vals_scaled[0];
	my $meanNull = mean(\@{$olaps{$region}});
	my $sdNull = sd(\@{$olaps{$region}});
#	print OUT $region."\t".$avs."\t".$meanNull."\t".$sdNull."\t".$kp."\t".$p."\t".$b."\n";
	push (@{$stat{'pvals'}}, $p);
	push (@{$stat{'avs'}}, $avs);
	push (@{$stat{'mean'}}, $meanNull);
	push (@{$stat{'sd'}}, $sdNull);
	push (@{$stat{'ks'}}, $kp);
	push (@{$stat{'enrichment'}}, $avs_norm);
	print BP join (",", @$vals_scaled)."\n";
    }
    close BP;
    my @cols = ("beds","avs","mean","sd","ks","enrichment","pvals","b");
    print OUT "Region\tAVS\tNull_Mean\tNull_SD\tKS_test\tEnrichment\t-log10(Pvalue)\t-log10(Adjusted_Pvalue)\n";
    $stat{'b'} = padjust(\@{$stat{'pvals'}});
    for (my $c=0;$c<=$#{$stat{'beds'}};$c++){
	foreach my $col(@cols){
#	    my $v = $col =~ m/^(pvals|b)$/ ? sprintf("%.2f", log10(${$stat{$col}}[$c])) : ${$stat{$col}}[$c];
	    my $v = ${$stat{$col}}[$c];
	    print OUT $v."\t";
	}
	print OUT "\n";
    }
    close OUT;
	    
    if ($visualize){
	my @bf;
	foreach my $val (@{$stat{'b'}}){
	    if ($val <= $bcutoff){
		push (@bf, "*");
	    } else {
		push (@bf, " ");
	    }
	}
	printLog("Generating figures");
	my $outputBoxplot = $outputPrefix.".boxplot.pdf";
	my $outputMatrix = $outputPrefix.".matrix.pdf";
	boxplot($outputBoxplotMat,\@bf, $outputBoxplot);
	matrixPlot($matrixFile,$outputMatrix);
    } else {
	printLog("No figure generated. Turn on --visualize for figures.");
    }
    unlink($outputBoxplotMat);
}

if ($program =~ m/all/ && !$keepTmp){
    printLog("Removing tmp files. Use --keepTmp to save the tmp files");
    unlink($vseFile);
    opendir (MRVdir, $mrvsDir) or die "Error in opening dir $mrvsDir\n";
    while (my $mrvfile = readdir(MRVdir)){
	next if ($mrvfile !~ m/\d/);
	unlink($mrvfile);
    }
    closedir (MRVdir);
    rmdir($mrvsDir);
    unlink($tallyFile);
}
printLog("Done!");
close (LOG);
#-----------------------------
